@model Plants.Models.CheckoutAddressViewModels

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true);

    <div class="form-horizontal">
        <h4>Сheckout</h4>
        <hr />
        @Html.HiddenFor(model => model.Checkout.Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Checkout.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Checkout.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Checkout.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Checkout.SecondName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Checkout.SecondName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Checkout.SecondName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Checkout.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Checkout.PhoneNumber, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Checkout.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <table class="table">
            <tr>
                <th>Страна</th>
                <th>Город</th>
                <th>Улица</th>
                <th>Дом</th>
                <th>Корпус</th>
                <th>Квартира</th>
                <th>Этаж</th>
                <th>Домофон</th>
                <th>Подъезд</th>
            </tr>
            @{var db = new Plants.Models.ApplicationDbContext(); }
            <tr>
                <td>
                    @Html.EditorFor(model => model.Address.Country, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Country, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.City, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.Street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Street, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.House, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.House, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.Korpus, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Korpus, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.Flat, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Flat, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.Floor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Floor, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.Intercom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Intercom, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Address.Entrance, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Entrance, "", new { @class = "text-danger" })
                </td>
            </tr>
        </table>

        @{//надо добавить раскрывающееся меню, где можно выбрать один из прошлых адрессов доставки, если он выбирается, то поля адресса автоматически заполняются
        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Купить" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Обратно в корзину", "ToCart", new { returnUrl = Request.Url.PathAndQuery })
</div>
